/* tslint:disable */
/* eslint-disable */
/**
 * Room Booking Service
 * Innopolis University room booking service API.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookRoomRequest,
  Booking,
  GetFreeRoomsRequest,
  HTTPValidationError,
  QueryBookingsRequest,
} from '../models';
import {
    BookRoomRequestFromJSON,
    BookRoomRequestToJSON,
    BookingFromJSON,
    BookingToJSON,
    GetFreeRoomsRequestFromJSON,
    GetFreeRoomsRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    QueryBookingsRequestFromJSON,
    QueryBookingsRequestToJSON,
} from '../models';

export interface BookRoomOperationRequest {
    roomId: any;
    bookRoomRequest: BookRoomRequest;
    acceptLanguage?: any;
}

export interface DeleteBookingRequest {
    bookingId: any;
    acceptLanguage?: any;
}

export interface GetFreeRoomsOperationRequest {
    getFreeRoomsRequest: GetFreeRoomsRequest;
    acceptLanguage?: any;
}

export interface GetMyBookingsRequest {
    acceptLanguage?: any;
}

export interface GetRoomsRequest {
    acceptLanguage?: any;
}

export interface QueryBookingsOperationRequest {
    queryBookingsRequest: QueryBookingsRequest;
    acceptLanguage?: any;
}

/**
 * 
 */
export class BookingApi extends runtime.BaseAPI {

    /**
     * Book A Room
     */
    async bookRoomRaw(requestParameters: BookRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling bookRoom.');
        }

        if (requestParameters.bookRoomRequest === null || requestParameters.bookRoomRequest === undefined) {
            throw new runtime.RequiredError('bookRoomRequest','Required parameter requestParameters.bookRoomRequest was null or undefined when calling bookRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/rooms/{room_id}/book`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookRoomRequestToJSON(requestParameters.bookRoomRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Book A Room
     */
    async bookRoom(requestParameters: BookRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.bookRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete A Booking
     */
    async deleteBookingRaw(requestParameters: DeleteBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bookingId === null || requestParameters.bookingId === undefined) {
            throw new runtime.RequiredError('bookingId','Required parameter requestParameters.bookingId was null or undefined when calling deleteBooking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/bookings/{booking_id}`.replace(`{${"booking_id"}}`, encodeURIComponent(String(requestParameters.bookingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete A Booking
     */
    async deleteBooking(requestParameters: DeleteBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of rooms that are available for booking at the specified time period.
     * Get Free Rooms
     */
    async getFreeRoomsRaw(requestParameters: GetFreeRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.getFreeRoomsRequest === null || requestParameters.getFreeRoomsRequest === undefined) {
            throw new runtime.RequiredError('getFreeRoomsRequest','Required parameter requestParameters.getFreeRoomsRequest was null or undefined when calling getFreeRooms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/rooms/free`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFreeRoomsRequestToJSON(requestParameters.getFreeRoomsRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a list of rooms that are available for booking at the specified time period.
     * Get Free Rooms
     */
    async getFreeRooms(requestParameters: GetFreeRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getFreeRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of bookings for the requesting user.
     * Get My Bookings
     */
    async getMyBookingsRaw(requestParameters: GetMyBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/bookings/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a list of bookings for the requesting user.
     * Get My Bookings
     */
    async getMyBookings(requestParameters: GetMyBookingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getMyBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Bookable Rooms
     */
    async getRoomsRaw(requestParameters: GetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get All Bookable Rooms
     */
    async getRooms(requestParameters: GetRoomsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query Bookings
     */
    async queryBookingsRaw(requestParameters: QueryBookingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.queryBookingsRequest === null || requestParameters.queryBookingsRequest === undefined) {
            throw new runtime.RequiredError('queryBookingsRequest','Required parameter requestParameters.queryBookingsRequest was null or undefined when calling queryBookings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/bookings/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryBookingsRequestToJSON(requestParameters.queryBookingsRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Query Bookings
     */
    async queryBookings(requestParameters: QueryBookingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.queryBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
